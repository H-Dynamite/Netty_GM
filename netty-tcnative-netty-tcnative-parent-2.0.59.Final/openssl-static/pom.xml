<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2016 The Netty Project
  ~
  ~ The Netty Project licenses this file to you under the Apache License,
  ~ version 2.0 (the "License"); you may not use this file except in compliance
  ~ with the License. You may obtain a copy of the License at:
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing permissions and limitations
  ~ under the License.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.netty</groupId>
    <artifactId>netty-tcnative-parent</artifactId>
    <version>2.0.59.Final</version>
  </parent>
  <artifactId>netty-tcnative-openssl-static</artifactId>
  <packaging>jar</packaging>

  <name>Netty/TomcatNative [OpenSSL - Static]</name>
  <description>
    A Mavenized fork of Tomcat Native which incorporates various patches. This artifact is statically linked
    to OpenSSL.
  </description>

  <properties>
    <opensslBuildDir>${project.build.directory}/openssl-${opensslVersion}</opensslBuildDir>
<!--    <opensslSourceDir>${project.build.directory}/openssl-source</opensslSourceDir>-->
<!--    <opensslHome>${project.build.directory}/openssl</opensslHome>-->
    <linkStatic>true</linkStatic>
    <compileLibrary>true</compileLibrary>
    <!-- Don't deploy this artifact to Maven Central -->
    <maven.deploy.skip>true</maven.deploy.skip>
    <skipJapicmp>true</skipJapicmp>
    <!-- We need to use the same module name for all our "native" impls as only one should be loaded -->
    <javaModuleName>${javaModuleNameNative}</javaModuleName>
  </properties>

  <build>

    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <configuration>
            <archive>
              <manifestEntries>
                <Fragment-Host>io.netty.tcnative-classes</Fragment-Host>
              </manifestEntries>
            </archive>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- Add the OpenSSL version to the manifest. -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <configuration>
          <instructions>
            <OpenSSL-Version>${opensslVersion}</OpenSSL-Version>
          </instructions>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${generatedSourcesDir}/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
        Set the classifier property based on the settings of the os-detector-plugin.
        Fedora-based systems use a different soname for OpenSSL than other linux distributions.
        Use a custom classifier ending in "-fedora" when building on fedora-based systems.
        Systems based on SUSE or Arch Linux build their OpenSSL library a bit differently and also
        require a custom classifier: "-suse" and "-arch".
      -->
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!-- Build the additional JAR that contains the native library. -->
          <execution>
            <id>native-jar</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <copy todir="${nativeJarWorkdir}">
                  <zipfileset src="${defaultJarFile}" />
                </copy>
                <copy todir="${nativeJarWorkdir}" includeEmptyDirs="false">
                  <zipfileset dir="${nativeLibOnlyDir}/META-INF/native" />
                  <regexpmapper handledirsep="yes" from="^(?:[^/]+/)*([^/]+)$" to="META-INF/native/\1" />
                </copy>
                <!-- linux / osx -->
                <move todir="${nativeJarWorkdir}/META-INF/native/" flatten="true">
                  <fileset dir="${nativeJarWorkdir}/META-INF/native/" />
                  <globmapper from="libnetty_tcnative.*" to="libnetty_tcnative_${os.detected.name}_${jniArch}.*" />
                </move>
                <!-- windows-->
                <move todir="${nativeJarWorkdir}/META-INF/native/" flatten="true">
                  <fileset dir="${nativeJarWorkdir}/META-INF/native/" />
                  <globmapper from="netty_tcnative.*" to="netty_tcnative_${os.detected.name}_${jniArch}.*" />
                </move>

                <!-- Append the Bundle-NativeCode section -->
                <manifest file="${nativeJarWorkdir}/META-INF/MANIFEST.MF" mode="update">
                  <attribute name="Bundle-NativeCode" value="${tcnativeManifest}" />
                </manifest>

                <jar destfile="${nativeJarFile}" manifest="${nativeJarWorkdir}/META-INF/MANIFEST.MF" basedir="${nativeJarWorkdir}" index="true" excludes="META-INF/MANIFEST.MF,META-INF/INDEX.LIST" />
                <!-- Adjust the classifier used for different OS distributions which provide differently-built openSSL libraries -->
                <condition property="classifier" value="${jniClassifier}-fedora">
                  <isset property="os.detected.release.like.fedora" />
                </condition>
                <condition property="classifier" value="${jniClassifier}-suse">
                  <isset property="os.detected.release.like.suse" />
                </condition>
                <condition property="classifier" value="${jniClassifier}-arch">
                  <isset property="os.detected.release.like.arch" />
                </condition>
                <condition property="classifier" value="${jniClassifier}">
                  <not>
                    <or>
                      <isset property="os.detected.release.like.fedora" />
                      <isset property="os.detected.release.like.suse" />
                      <isset property="os.detected.release.like.arch" />
                    </or>
                  </not>
                </condition>
                <attachartifact file="${nativeJarFile}" classifier="${classifier}" type="jar" />
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Configure the distribution statically linked against OpenSSL-->
      <plugin>
        <groupId>org.fusesource.hawtjni</groupId>
        <artifactId>hawtjni-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>build-native-lib</id>
            <goals>
              <goal>generate</goal>
              <goal>build</goal>
            </goals>
            <phase>compile</phase>
            <configuration>
              <name>netty_tcnative</name>
              <nativeSourceDirectory>${generatedSourcesDir}/c</nativeSourceDirectory>
              <customPackageDirectory>${generatedSourcesDir}/native-package</customPackageDirectory>
              <libDirectory>${nativeLibOnlyDir}</libDirectory>
              <forceAutogen>${forceAutogen}</forceAutogen>
              <forceConfigure>${forceConfigure}</forceConfigure>
              <windowsBuildTool>msbuild</windowsBuildTool>
              <configureArgs>
                <configureArg>--with-ssl=C:\openssl\gmssl\include</configureArg>
                <configureArg>--with-static-libs</configureArg>
<!--                <configureArg>&#45;&#45;libdir=${project.build.directory}/native-build/target/lib</configureArg>-->
                <configureArg>--libdir=C:\openssl\gmssl\win\</configureArg>
              </configureArgs>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>netty-tcnative-classes</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>build-openssl-windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-antrun-plugin</artifactId>
            <executions>
              <execution>
                <id>source-openssl</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <target>
                    <!-- Add the ant tasks from ant-contrib -->
                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

                    <!-- 优先使用信安世纪自己的openssl, 找不到再去下载官方的openssl -->
                    <if>
                      <available file="${localOpensslDir}/openssl-${opensslVersion}.tar.gz" />
                      <then>
                        <echo> 使用${localOpensslDir}目录中的openssl</echo>
                        <echo> 使用${localOpensslDir}/openssl-${opensslVersion}.tar.gz目录中的openssl</echo>
                      </then>
                      <else>
                        <echo> Download the official openssl source.</echo>
                        <ftp action="get" server="ftp.openssl.org" remotedir="source" userid="anonymous" password="anonymous" passive="yes" verbose="yes">
                          <fileset dir="${project.build.directory}">
                            <include name="**/openssl-${opensslVersion}.tar.gz" />
                          </fileset>
                        </ftp>
                      </else>
                    </if>


<!--                    <echo>Move local openssl file to correct directory</echo>-->
<!--                    <copy file="${localOpensslDir}/openssl-${opensslVersion}.tar.gz" tofile="${project.build.directory}/openssl-${opensslVersion}.tar.gz" />-->

<!--                    <checksum file="${project.build.directory}/openssl-${opensslVersion}.tar.gz" algorithm="SHA-256" property="${opensslSha256}" verifyProperty="isEqual" />-->
<!--                    <gunzip src="${project.build.directory}/openssl-${opensslVersion}.tar.gz" dest="${project.build.directory}/" />-->
<!--                    <untar src="${project.build.directory}/openssl-${opensslVersion}.tar" dest="${project.build.directory}/" />-->

                    <!-- Build for the correct platform -->
<!--                    <pathconvert property="sslHomePath" targetos="windows">-->
<!--                      <path location="${sslHome}" />-->
<!--                    </pathconvert>-->

<!--                    <if>-->
<!--                    <equals arg1="${archBits}" arg2="32" />-->
<!--                    <then>-->
<!--                      <echo message="Building OpenSSL for Win32" />-->
<!--                      <exec executable="perl" failonerror="true" dir="${opensslBuildDir}" resolveexecutable="true">-->
<!--&lt;!&ndash;                        <arg line="Configure VC-WIN32 &#45;&#45;prefix=${sslHomePath}" />&ndash;&gt;-->
<!--                        <arg line="Configure VC-WIN32" />-->
<!--                      </exec>-->
<!--                      <exec executable="${opensslBuildDir}/ms/do_ms.bat" failonerror="true" dir="${opensslBuildDir}" />-->
<!--                      <exec executable="${opensslBuildDir}/ms/do_nasm.bat" failonerror="true" dir="${opensslBuildDir}" />-->
<!--                      <exec executable="nmake" failonerror="true" dir="${opensslBuildDir}" resolveexecutable="true">-->
<!--                        <arg line="-f ms\nt.mak all install" />-->
<!--                      </exec>-->
<!--                    </then>-->
<!--                    <else>-->
<!--                      <echo message="Building OpenSSL for Win64" />-->
<!--                      <exec executable="perl" failonerror="true" dir="${opensslBuildDir}" resolveexecutable="true">-->
<!--                        <arg line="Configure VC-WIN64A &#45;&#45;prefix=${sslHome}" />-->
<!--                      </exec>-->
<!--                      <exec executable="${opensslBuildDir}/ms/do_win64a.bat" failonerror="true" dir="${opensslBuildDir}" />-->
<!--                      <exec executable="nmake" failonerror="true" dir="${opensslBuildDir}" resolveexecutable="true">-->
<!--                        <arg line="-f ms\nt.mak all install" />-->
<!--                      </exec>-->
<!--                    </else>-->
<!--                    </if>-->
<!--                    <if>-->
<!--                      <available file="${opensslSourceDir}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already downloaded, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Downloading OpenSSL" />-->

<!--                        <mkdir dir="${opensslSourceDir}" />-->
<!--                        <get src="https://codeload.github.com/Tongsuo-Project/Tongsuo/zip/refs/heads/master" dest="${project.build.directory}/tongsuo-${opensslVersion}.zip" verbose="on" />-->
<!--                        <gunzip src="${project.build.directory}/tongsuo-${opensslVersion}.zip" dest="${project.build.directory}/" />-->
<!--                        <move file="${project.build.directory}/Tongsuo-master" tofile="${opensslSourceDir}/" />-->
<!--                      </else>-->
<!--                    </if>-->
                  </target>
                </configuration>
              </execution>

<!--              <execution>-->
<!--                <id>build-openssl</id>-->
<!--                <phase>compile</phase>-->
<!--                <goals>-->
<!--                  <goal>run</goal>-->
<!--                </goals>-->
<!--                <configuration>-->
<!--                  <target>-->
<!--                    &lt;!&ndash; Add the ant tasks from ant-contrib &ndash;&gt;-->
<!--                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->

<!--                    <if>-->
<!--                      <available file="${opensslHome}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already build, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Building OpenSSL" />-->

<!--                        &lt;!&ndash; Build for the correct platform &ndash;&gt;-->
<!--                        <pathconvert property="sslHomePath" targetos="windows">-->
<!--                          <path location="${opensslHome}" />-->
<!--                        </pathconvert>-->
<!--                        <if>-->
<!--                          <equals arg1="${archBits}" arg2="32" />-->
<!--                          <then>-->
<!--                            <echo message="Building OpenSSL for Win32" />-->
<!--                            <exec executable="perl" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="Configure VC-WIN32 &#45;&#45;prefix=${sslHomePath}" />-->
<!--                            </exec>-->
<!--                            <exec executable="nmake" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="install" />-->
<!--                            </exec>-->
<!--                          </then>-->
<!--                          <else>-->
<!--                            <echo message="Building OpenSSL for Win64" />-->
<!--                            <exec executable="perl" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="Configure VC-WIN64A &#45;&#45;prefix=${sslHome}" />-->
<!--                            </exec>-->
<!--                            <exec executable="nmake" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="install" />-->
<!--                            </exec>-->
<!--                          </else>-->
<!--                        </if>-->
<!--                      </else>-->
<!--                    </if>-->
<!--                  </target>-->
<!--                </configuration>-->
<!--              </execution>-->
<!--           -->

            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

<!--    <profile>-->
<!--      <id>build-openssl-linux</id>-->
<!--      <activation>-->
<!--        <os>-->
<!--          <family>linux</family>-->
<!--        </os>-->
<!--      </activation>-->
<!--      <build>-->
<!--        <plugins>-->
<!--          <plugin>-->
<!--            <artifactId>maven-antrun-plugin</artifactId>-->
<!--            <executions>-->
<!--              <execution>-->
<!--                <id>source-openssl</id>-->
<!--                <phase>generate-sources</phase>-->
<!--                <goals>-->
<!--                  <goal>run</goal>-->
<!--                </goals>-->
<!--                <configuration>-->
<!--                  <target>-->
<!--                    &lt;!&ndash; Add the ant tasks from ant-contrib &ndash;&gt;-->
<!--                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->

<!--                    <if>-->
<!--                      <available file="${opensslSourceDir}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already downloaded, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Downloading OpenSSL" />-->
<!--                        <mkdir dir="${opensslSourceDir}" />-->
<!--                        <get src="https://codeload.github.com/Tongsuo-Project/Tongsuo/zip/refs/heads/master" dest="${project.build.directory}/tongsuo-${opensslVersion}.zip" verbose="on" />-->
<!--                        &lt;!&ndash; Use the tar command (rather than the untar ant task) in order to preserve file permissions. &ndash;&gt;-->
<!--                        <exec executable="unzip" failonerror="true" dir="${project.build.directory}/" resolveexecutable="true">-->
<!--                           <arg line="tongsuo-${opensslVersion}.zip" />-->
<!--                         </exec>-->
<!--                        <move file="${project.build.directory}/Tongsuo-master" tofile="${opensslSourceDir}" />-->
<!--                      </else>-->
<!--                    </if>-->
<!--                  </target>-->
<!--                </configuration>-->
<!--              </execution>-->

<!--              <execution>-->
<!--                <id>build-openssl</id>-->
<!--                <phase>compile</phase>-->
<!--                <goals>-->
<!--                  <goal>run</goal>-->
<!--                </goals>-->
<!--                <configuration>-->
<!--                  <target>-->
<!--                    &lt;!&ndash; Add the ant tasks from ant-contrib &ndash;&gt;-->
<!--                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->

<!--                    <if>-->
<!--                      <available file="${opensslHome}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already build, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Building OpenSSL" />-->
<!--                        <mkdir dir="${opensslHome}" />-->
<!--                        <exec executable="config" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                          <arg line="-O3 -fno-omit-frame-pointer -fPIC no-ssl3 no-shared no-comp -DOPENSSL_NO_HEARTBEATS &#45;&#45;strict-warnings enable-ec_elgamal enable-paillier enable-ntls &#45;&#45;prefix=${opensslHome} &#45;&#45;openssldir=${opensslHome}" />-->
<!--                        </exec>-->
<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                          <arg value="depend" />-->
<!--                        </exec>-->
<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true" />-->
<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                          &lt;!&ndash; Don't install manpages to make things as fast a possible &ndash;&gt;-->
<!--                          <arg value="install_sw" />-->
<!--                        </exec>-->
<!--                      </else>-->
<!--                    </if>-->
<!--                  </target>-->
<!--                </configuration>-->
<!--              </execution>-->
<!--            </executions>-->
<!--          </plugin>-->
<!--        </plugins>-->
<!--      </build>-->
<!--    </profile>-->
<!--    -->
<!--    <profile>-->
<!--      <id>build-openssl-mac</id>-->
<!--      <activation>-->
<!--        <os>-->
<!--          <family>mac</family>-->
<!--        </os>-->
<!--      </activation>-->
<!--      <build>-->
<!--        <plugins>-->
<!--          <plugin>-->
<!--            <artifactId>maven-antrun-plugin</artifactId>-->
<!--            <executions>-->
<!--              <execution>-->
<!--                <id>source-openssl</id>-->
<!--                <phase>generate-sources</phase>-->
<!--                <goals>-->
<!--                  <goal>run</goal>-->
<!--                </goals>-->
<!--                <configuration>-->
<!--                  <target>-->
<!--                    &lt;!&ndash; Add the ant tasks from ant-contrib &ndash;&gt;-->
<!--                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->

<!--                    <if>-->
<!--                      <available file="${opensslSourceDir}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already downloaded, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Downloading OpenSSL" />-->

<!--                        <mkdir dir="${opensslSourceDir}" />-->
<!--                        <get src="https://codeload.github.com/Tongsuo-Project/Tongsuo/zip/refs/heads/master" dest="${project.build.directory}/tongsuo-${opensslVersion}.zip" verbose="on" />-->
<!--                        &lt;!&ndash; Use the tar command (rather than the untar ant task) in order to preserve file permissions. &ndash;&gt;-->
<!--                        <exec executable="unzip" failonerror="true" dir="${project.build.directory}/" resolveexecutable="true">-->
<!--                           <arg line="tongsuo-${opensslVersion}.zip" />-->
<!--                         </exec>-->
<!--                        <move file="${project.build.directory}/Tongsuo-master" tofile="${opensslSourceDir}/" />-->
<!--                      </else>-->
<!--                    </if>-->
<!--                  </target>-->
<!--                </configuration>-->
<!--              </execution>-->
<!--              <execution>-->
<!--                <id>build-openssl</id>-->
<!--                <phase>compile</phase>-->
<!--                <goals>-->
<!--                  <goal>run</goal>-->
<!--                </goals>-->
<!--                <configuration>-->
<!--                  <target>-->
<!--                    &lt;!&ndash; Add the ant tasks from ant-contrib &ndash;&gt;-->
<!--                    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />-->

<!--                    <if>-->
<!--                      <available file="${opensslHome}" />-->
<!--                      <then>-->
<!--                        <echo message="OpenSSL was already build, skipping the build step." />-->
<!--                      </then>-->
<!--                      <else>-->
<!--                        <echo message="Building OpenSSL" />-->
<!--                        <mkdir dir="${opensslHome}" />-->
<!--                        <if>-->
<!--                          <equals arg1="${os.arch}" arg2="aarch64" />-->
<!--                          &lt;!&ndash; Don't try to compile the tests as this currently fails: https://github.com/openssl/openssl/issues/18720 &ndash;&gt;-->
<!--                          <then>-->
<!--                            <exec executable="Configure" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="darwin64-arm64-cc no-tests -O3 -fno-omit-frame-pointer -fPIC no-ssl3 no-shared no-comp -DOPENSSL_NO_HEARTBEATS &#45;&#45;strict-warnings enable-ec_elgamal enable-paillier enable-ntls &#45;&#45;prefix=${opensslHome} &#45;&#45;openssldir=${opensslHome} ${macOsxDeploymentTarget}" />-->
<!--                            </exec>-->
<!--                          </then>-->
<!--                          <else>-->
<!--                            <exec executable="Configure" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                              <arg line="darwin64-x86_64-cc no-tests -O3 -fno-omit-frame-pointer -fPIC no-ssl3 no-shared no-comp -DOPENSSL_NO_HEARTBEATS &#45;&#45;strict-warnings enable-ec_elgamal enable-paillier enable-ntls &#45;&#45;prefix=${opensslHome} &#45;&#45;openssldir=${opensslHome} ${macOsxDeploymentTarget}" />-->
<!--                            </exec>-->
<!--                          </else>-->
<!--                        </if>-->

<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                          <arg value="depend" />-->
<!--                        </exec>-->
<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true" />-->
<!--                        <exec executable="make" failonerror="true" dir="${opensslSourceDir}" resolveexecutable="true">-->
<!--                          &lt;!&ndash; Don't install manpages to make things as fast a possible &ndash;&gt;-->
<!--                          <arg value="install_sw" />-->
<!--                        </exec>-->
<!--                      </else>-->
<!--                    </if>-->
<!--                  </target>-->
<!--                </configuration>-->
<!--              </execution>-->
<!--            </executions>-->
<!--          </plugin>-->
<!--        </plugins>-->
<!--      </build>-->
<!--    </profile>-->
  </profiles>
</project>
